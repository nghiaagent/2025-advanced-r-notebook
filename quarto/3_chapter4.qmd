# Subsetting {.unnumbered}

```{r setup}
#| include: FALSE

# Set knitr options
knitr::opts_chunk$set(
	echo = TRUE,
	message = TRUE,
	warning = TRUE
)

# Load packages

library(pacman)

p_load(
  lobstr,
  tidyverse,
  reactable,
  vctrs
)

# Declare location
here::i_am("quarto/3_chapter4.qmd")

# Set seed
set.seed(6969)

```

# Quiz

## Quiz 1

What is the result of subsetting a vector with positive integers, negative integers, a logical vector, or a character vector?

### Answers

- Positive integer: Select elements at specified indices

```{r}
x <- c(1:6)
x[c(1, 3)]
```

- Negative integers: Exclude those indices

```{r}
x <- c(1:6)
x[c(-1, -3)]
```

- Logical vector: Select elements where the logical vector element is TRUE (this is how subsetting via a condition work)


```{r}
# Get even numbers (mod 2 = 0)
x <- c(1:6)
x[x %% 2 == 0]
```

- Character vector: Return elements with matching names

```{r}
x <- c(1:6) %>%
  set_names(letters[1:6])

x[c("c", "a", "d")]
```

## Quiz 2

Whatâ€™s the difference between `[`, `[[`, and `$` when applied to a list?

```{r}
x <- list(
  a = c(1:3),
  b = c(4:6),
  c = c(7:9),
  d = c(10:12)
)
```

### Answers

- `[` Get a subsetted list based on the condition

```{r}
x[c("d", "c")]
```

- `[[` Get the selected list element (select via index or name)

```{r}
x[[1]]
x[["a"]]
```

- `x$var` Get the selected list element (select via name, shorthand for `x[["var"]]`)

```{r}
x$a
```


## Quiz 3

When should you use `drop = FALSE`?

### Answers

When subsetting a matrix / array / dataframe, length 1 dimensions are dropped. `drop = FALSE` prevents this.

```{r}
x <- matrix(1:9, ncol = 3)

x[1, ] %>%
  str() # no longer 2D

x[1, , drop = FALSE] %>%
  str() # is 2D
```

## Quiz 4

If x is a matrix, what does `x[] <- 0` do? How is it different from `x <- 0`?

### Answers

`x[] <- 0` replaces all slots of the matrix with 0 but keeping its attributes. `x <- 0` replaces the matrix with 0.

```{r}
# First case
x <- matrix(1:9, ncol = 3)
x[] <- 0
x

# Second case
x <- matrix(1:9, ncol = 3)
x <- 0
x

```


## Quiz 5

How can you use a named vector to relabel categorical variables?

```{r}
x <- c("o", "e", "e", "o", "e", "o")
x
```


### Answers

- Create a lookup vector, use original vector values as lookup vector names
- Subset lookup vector using original vector
- (Optional) remove lookup vector names for clarity 


```{r}

lookup <- c(
  "o" = "odd",
  "e" = "even"
)

x <- lookup[x] %>%
  unname()

x
```


# Selecting multiple elements

## Ex. 1

Fix each of the following common data frame subsetting errors:

```{r}
#| eval: false
mtcars[mtcars$cyl = 4, ]
mtcars[-1:4, ]
mtcars[mtcars$cyl <= 5]
mtcars[mtcars$cyl == 4 | 6, ]
```

### Answers

```{r}
# Make sure the logical vector is a test
mtcars[mtcars$cyl == 4, ] %>%
  reactable(defaultPageSize = 4)

# Wrap indices inside a vector
mtcars[-(1:4), ] %>%
  reactable(defaultPageSize = 4)

# Add comma to subset rows
mtcars[mtcars$cyl <= 5, ] %>%
  reactable(defaultPageSize = 4)

# Either use %in% or use 2 conditions
mtcars[mtcars$cyl %in% c(4, 6), ] %>%
  reactable(defaultPageSize = 4)

mtcars[mtcars$cyl == 4 | mtcars$cyl == 6, ] %>%
  reactable(defaultPageSize = 4)
```

## Ex. 2

Why does the following code yield five missing values? (Hint: why is it different from `x[NA_real_]`?)

```{r}
x <- 1:5
x[NA]
#> [1] NA NA NA NA NA
```

### Answers

- Code compares if each element of `x` is the same as `NA`; returns NA.
- `NA` is recycled; the check is repeated for all vector elements. 

**NB**: This is why we use `is.na()` to get missing values in an object instead.

```{r}
1L == NA
```

## Ex. 3

What does `upper.tri()` return? How does subsetting a matrix with it work? Do we need any additional subsetting rules to describe its behaviour?

```{r}
x <- outer(1:5, 1:5, FUN = "*")
x[upper.tri(x)]
```

### Answers

- `upper.tri()` returns the upper triangle (top right) portion of the matrix; where the row number is smaller than the column number.

```{r}
upper.tri(x)
```

- The logical matrix can be used to subset the original matrix.
- Extra behaviour includes the option to include diagonals.
- The returned object is a vector, dropping the `dim` attribute of a matrix.

```{r}
x[upper.tri(x)]
```

## Ex. 4

Why does `mtcars[1:20]` return an error? How does it differ from the similar `mtcars[1:20, ]`?

### Answers

`mtcars[1:20]` get the first 20 columns of `mtcars`. There are not enough columns.

```{r}
#| error: TRUE
dim(mtcars)
mtcars[1:20]
```
`mtcars[1:20, ]` gets the first 20 rows of `mtcars`, which is valid.

```{r}
mtcars[1:20, ] %>%
  reactable(defaultPageSize = 4)
```

## Ex. 5

Implement your own function that extracts the diagonal entries from a matrix (it should behave like `diag(x)` where `x` is a matrix).

### Answers

Diagonal entries are entries where number of rows is equal to number of columns. We can programmatically create a matrix containing the relevant indices then subset the matrix for those indices.

#### Desired behaviour

```{r}
# Test matrices
x <- list(
  matrix(1:24, nrow = 3, ncol = 8),
  matrix(1:24, nrow = 4, ncol = 6),
  matrix(1:25, nrow = 5, ncol = 5),
  matrix(1:24, nrow = 6, ncol = 4),
  matrix(1:24, nrow = 8, ncol = 3)
  )

map(x, \(x) diag(x))
```

#### Build function

```{r}
get_matrix_diagonals <- function(matrix) {
  # Get total number of diagonals in matrix
  select_length <- matrix %>%
    dim() %>%
    min()
  
  # Build matrix identifying the diagonals
  select <- 
    c(1:select_length, 1:select_length) %>%
    matrix(
      ncol = 2,
      byrow = FALSE
    )
  
  # Filter matrix, return data
  matrix[select] %>%
    return()
}
```

```{r}
# Test behaviour
map(x, \(x) get_matrix_diagonals(x))
```

## Ex. 6

What does `df[is.na(df)] <- 0` do? How does it work?

### Answers

It replaces `NA` with 0 in all dataframe cells. It creates a new logical matrix showing the status of all dataframe cells, which can then be used to subset the dataframe. The subset is then modified.

```{r}
# Function
is.na.data.frame
```


```{r}
# Test on first 30 rows of airquality dataset
x <- airquality[1:30, ]

x %>%
  reactable(defaultPageSize = 5)

x[is.na(x)] <- 0

x %>%
  reactable(defaultPageSize = 5)

```


# Selecting a single element

## Ex. 1

Brainstorm as many ways as possible to extract the third value from the `cyl` variable in the `mtcars` dataset.

```{r}
data("mtcars")
```

### Answers


```{r}
# Get third value in cyl variable
mtcars$cyl[3]

# Get value of cyl variable in third row
mtcars[3, ]$cyl

# Subset directly to variable and row
mtcars[3, "cyl"]
```
**NB**: There are other code possible to get the same results, but the 3 main strategies are here.

## Ex. 2

Given a linear model, e.g., `mod <- lm(mpg ~ wt, data = mtcars)`, extract the residual degrees of freedom. Then extract the R squared from the model summary (`summary(mod)`)

```{r}
mod <- lm(mpg ~ wt, data = mtcars)
mod_summary <- summary(mod)
```

### Answers

```{r}
# First, profile objects, get appropriate slots.
tree(mod)
tree(mod_summary)

# Get residual df
mod$df.residual

# Get R-squared
mod_summary$r.squared
```


# Applications

## Ex. 1

How would you randomly permute the columns of a data frame? (This is an important technique in random forests.) Can you simultaneously permute the rows and columns in one step?

### Answers

For both, get a random vector containing column and row indices then subset the dataframe accordingly.

```{r}
# Test on mtcars dataset
## Permute columns
mtcars %>%
  .[, sample(ncol(.))] %>%
  reactable(defaultPageSize = 4)

## Permute columns and rows
mtcars %>%
  .[sample(nrow(.)), sample(ncol(.))] %>%
  reactable(defaultPageSize = 4)
```

## Ex. 2

How would you select a random sample of m rows from a data frame? What if the sample had to be contiguous (i.e., with an initial row, a final row, and every row in between)?

### Answers

- Select sample of `m` rows: Sample like Ex. 1, with an extra argument to `sample()`
- Select sample of `m` contiguous rows: Randomly select the first row index to sample from, then select rows beginning from that index.

```{r}
# Test on mtcars dataset. Let's work with 12 rows.
m <- 12

## Select sample of m rows
mtcars %>%
  .[sample(nrow(.), size = m), ] %>%
  reactable(defaultPageSize = 4)

## Select sample of m contiguous rows
mtcars %>%
  .[
    sample((nrow(mtcars) - m + 1), size = 1) %>%
      seq(from = ., to = . + m - 1),
  ] %>%
  reactable(defaultPageSize = 4)
```


## Ex. 3

How could you put the columns in a data frame in alphabetical order?

### Answers

- Get vector depicting order of column names
- Subset accordingly

```{r}
mtcars %>%
  .[, order(colnames(.))] %>%
  reactable(defaultPageSize = 4)
```

